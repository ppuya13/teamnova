package java4;

import java4.대장간.대장간출력;
import java4.사냥터.사냥터;
import java4.상점.상점;
import java4.인벤토리.인벤토리출력;
import java4.캐릭터.플레이어;
import java.util.Scanner;

//import static java4.사냥터.사냥터.사냥터입력;

public class Main {
    static public java4.캐릭터.플레이어 플레이어 = new 플레이어();
    public static 출력 메인 = new 출력();
    public static 사냥터 사냥터 = new 사냥터();
    public static void main(String[] args) throws InterruptedException, CloneNotSupportedException {
        //캐릭터 초기화
//        플레이어.start();
        플레이어.인벤토리초기화();
        플레이어.스킬초기화();
        //캐릭터 초기화

        //상점 초기화
        상점 상점 = new 상점();//상점에 물건들을 진열하기 위한 코드
        //상점 초기화

//        사냥터입력.start(); //일단 입력을 start함.(wait상태)


        Scanner sc = new Scanner(System.in);
        int 입력 = -1; // 디폴트 입력값
        boolean 사망 = false;

        //출력변수
        인벤토리출력 인벤토리출력 = new 인벤토리출력();
        대장간출력 대장간출력 = new 대장간출력();
        //출력변수
        플레이어.최종능력치적용();


        마을:
        while (true) {

            System.out.println(메인.능력치창());
            System.out.print(
                    "\n이곳은 마을입니다. 무엇을 하시겠습니까?" +
                            "\n1.사냥터" +
                            "\n2.인벤토리" +
                            "\n3.상점" +
                            "\n4.대장간" +
                            "\n5.휴식" +
                            "\n→");

            입력 = sc.nextInt();

            switch (입력) {
                case 0: //디버깅용
                    System.out.println("디버깅용");
                    break;
                case 1: //사냥터
                    java4.사냥터.사냥터.사냥터=true;
                    사냥터.사냥터();
                    break;
                case 2: //인벤토리
                    인벤토리출력.인벤토리();
                    break;
                case 3: //상점
                    상점.상점();
                    break;
                case 4: //대장간
                    대장간출력.대장간();
                    break;
                case 5: //휴식
                    플레이어.휴식();
                    break;
                case 456456:
                    System.out.println("show me the money!!!");
                    플레이어.소지금=플레이어.소지금+5000;
                    Thread.sleep(1000);
            }
            if (사망) {
                System.out.println("플레이어는 쓰러졌다.");
                System.exit(0);
                break;
            }
        }
    }//psvm 닫힘
}//class 닫힘



//0825 스레드합격(기찬 팀장님)


//0823 피드백(기찬 팀장님)
//메인 스레드가 담당하던 입력을 단발성 이벤트인 전투 하나 때문에 다른 스레드로 이관시키는 건 딱히 이점이 있지는 않다.

//전투 자체를 스레드로 빼보도록 하자.
//전투가 진행중일 때 메인이 입력을 담당하게 하기.



//0823 피드백(석주원 멘토님)
//본인은 내 설명으로 납득이 됐지만 내 설명이 파트장님에게 제대로 전달되지 않았을 가능성이 있다. //발표준비를 제대로 안하고 중간검사를 받았기 때문에 가능성 높음.
//기찬 팀장님에게 물어보는 것도 좋을 것 같다.

//스레드를 쓴 이유를 제대로 정리하기 (왜?를 의식하자)


//0823 피드백(이연우 파트장님)
//타이머에 스레드를 사용하지 않아도 될 것 같다(완료)
//입력에 스레드를 사용한 점이 납득이 안된다??
//->스레드를 사용하지 않고 구현할 수 있다?

//1. 전투가 시작하면 캐릭터의 속도에 따라 턴을 잡고 플레이어가 턴을 잡을 경우 제한시간(타이머)과 함께 선택지가 주어진다.
//2. 플레이어가 선택지를 고를 경우 플레이어의 행동 또는 다른 선택지를 출력하게 된다.
//3. 제한시간을 초과하거나 최종적으로 행동을 하는 선택지를 고를 경우 타이머가 사라지며 플레이어의 행동을 출력하고 턴을 넘긴다.

//일단 출력을 하는 스레드가 필요하다. 그리고 입력을 받을 스레드가 필요하다.
//왜냐하면 scanner 또는 bufferedreader를 이용해 입력을 받는 도중에는 그 스레드는 다른 작업을 할 수 없기 때문이다.
//입력과 출력을 하나의 스레드로 하게 된다면? 입력을 받는 동안엔 출력을 할 수가 없다. -> 타이머가 지나가면 자동공격을 출력해야 하지만 scanner가 스레드를 잡고있기 때문에 출력 작업이 불가능하다.
//그러므로 출력과 입력은 각각의 스레드에서 해야한다.


//물론 다른 스레드에서 메인스레드가 할 일을 하게 할 수도 있겠지만 굳이? 리더가 해야할 일을 할 줄 안다고 하여 부하에게 그 일을 시키는 것은 좋은 선택은 아니라고 생각한다.


//캐릭터창, 몬스터창 개선 방안
//사냥터출력에 이너클래스(스태틱)으로 넣은 뒤 스레드 없이 그때그때 표시하기
//갱신용 메소드 만들고 갱신할때마다 호출
//생성자에 초기셋팅 하고 visible:false
//전투시작시마다 visible:true
//전투종료시마다 visible:false
//공격, 행게증마다 갱신용 메소드 호출

//대장간 스레드 각각 따로 쓰지 않고 한개로 뭉치기 //완료
//캐릭터창, 몬스터창 계속돌리지 않고 그때그때 보여줄 수 있게 수정하는 것 고려해보기

//0811 피드백(기찬 팀장님) (스레드미통과)
//스레드를 사용할 필요 없는 곳에 너무 스레드를 남발했다.
//스레드는 적게 쓸수록 좋다.

//몬스터를 각각 스레드를 쓰게 하지 말고 싱글스레드 또는 스레드없이 관리하기(가능할거같음).
//스테이터스창은 while로 돌리지 말고 스테이터스가 바뀔 일이 있을 때만 호출하도록 바꾸기

//스레드는 꼭 써야하는 곳에만 사용하기
//1. 플레이어 턴때 시간제한 두기(기찬팀장님 제안)
//2. 대장간에 강화를 시킬때 시간이 걸리게 해서 강화하는동안 다른것을 할수있게(기찬팀장님 제안)
//3. 도트딜(턴과 상관없이 들어가는 데미지)(기찬팀장님 제안)
//4. 대장간에 신규기능(아이템제작 추가)




//0808 피드백(배희진 파트장님) (상속통과)
//캐릭터의 상속 구조가 이상하다.(이유가 없는 상속)
//유연함, 확장성 등을 고려하여 개선을 해보자...
//다음에 검사 받을 때 캐릭터 부분을 재검사받아보기

//0806 피드백(손동오 파트장님)
//1.결말을 완성하기.
//2.발표에 커서 사용을 줄이기(난잡해 보일 수 있음)
//3.실수에 관한 걸 빠르게 넘어가려고 하는 것 고치기(이런 스타일을 유지하려고 한다면 실수를 많이 줄이기)
//4.발표준비 좀 더 하기(내가 준비한 발표가 상대방이 느끼기에 어땠는가 생각하기)

//결말 :
//1.보스몹을 준비하고 매우 낮은 확률로 등장하게 하기? 또는 선택해서 잡을 수 있게 하기
//2.져서 사망할 경우 처음으로 돌아오게 하기



//중간검사 피드백
//캐릭터 클래스 용도 나누기(super 사용해보기)
//객체지향 재사용성에 대해 공부하기
//그 밖에 과중한 업무를 맡고 있는 클래스가 있다면 조각내기
//오버라이딩 알아보기
//플레이어가 static이면 멀티쓰레딩에 안좋을 수 있으니 고려하기



//현재 캐릭터 클래스의 용도
//능력치관련
//아이템관련(인벤토리)
//아이템관련(상점)
//스킬사용관련

//개편 후
//클래스 구조 예상
//abstract 능력치(변수선언)
//abstract 캐릭인벤토리(아이템 사용 등 인벤토리 동작들이 담긴 클래스)
//abstract 캐릭터전투(스킬 사용, 공격 등 행동들이 담긴 클래스)
//class 캐릭터
//이후에 직업같은게 추가되면 캐릭터 대신 직업을 넣음

//상점 관련 메소드는 전부 상점 클래스로 이동
//아이템 메소드는 아이템 마다 클래스 생성
//abstract 아이템(변수선언)
//class 각각아이템
