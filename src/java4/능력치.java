package java4;


import java.util.ArrayList;
import java.util.Scanner;

public class 능력치 { //캐릭터의 능력치나 소지품에 영향을 미치는 메소드는 이곳에

    ArrayList<아이템> 회복물약가방;
    ArrayList<아이템> 소지품;
    int 소지금;
    int 캐릭터레벨;
    int 캐릭터최대경험치;
    int 캐릭터현재경험치;
    int 캐릭터최대체력;
    int 캐릭터현재체력;
    int 캐릭터최대마나;
    int 캐릭터현재마나;
    int 캐릭터최종공격력;
    int 캐릭터공격력;
    int 캐릭터추가공격력;
    int 캐릭터최종방어력;
    int 캐릭터방어력;
    int 캐릭터추가방어력;
    double 캐릭터치명확률;
    double 캐릭터치명피해;
    double 캐릭터회피;

    Scanner sc = new Scanner(System.in);
    int 구매개수=0;
    int 입력 = 0;




    능력치(
            int 레벨,
            int 최대경험치,
            int 현재경험치,
            int 최대체력,
            int 현재체력,
            int 최대마나,
            int 현재마나,
            int 공격력,
            int 추가공격력,
            int 방어력,
            int 추가방어력,
            int 치명확률,
            int 치명피해,
            int 회피,
            int 소지금
    )
    {
        this.캐릭터레벨 = 레벨;
        this.캐릭터최대경험치 = 최대경험치;
        this.캐릭터현재경험치 = 현재경험치;
        this.캐릭터최대체력 = 최대체력;
        this.캐릭터현재체력 = 현재체력;
        this.캐릭터최대마나 = 최대마나;
        this.캐릭터현재마나 = 현재마나;
        this.캐릭터공격력 = 공격력;
        this.캐릭터추가공격력 = 추가공격력;
        this.캐릭터방어력 = 방어력;
        this.캐릭터추가방어력 = 추가방어력;
        this.캐릭터치명확률 = 치명확률;
        this.캐릭터치명피해 = 치명피해;
        this.캐릭터회피 = 회피;
        this.캐릭터최종공격력=this.캐릭터공격력+this.캐릭터추가공격력;
        this.캐릭터최종방어력=this.캐릭터방어력+this.캐릭터추가방어력;
        this.소지금=소지금;
        this.회복물약가방 = new ArrayList<>();
        this.소지품 = new ArrayList<>();
    }


    public void 인벤토리초기화 (){
        아이템 체력물약 = new 아이템(-1);
        아이템 마나물약 = new 아이템(-2);
        아이템 아이템 = new 아이템(0);
        this.회복물약가방.add(체력물약);
        this.회복물약가방.add(마나물약);

        //더미아이템 20개 생성
        for (int i = 0; i <= 18; i++) { //0부터 19까지 총 20번 반복
            this.소지품.add(아이템);
        }//더미아이템 20개를 캐릭터의 소지품에 넣음, 나중에 지우기
    }

    public void 상점구매(int 타겟, 상점 상점,int 스택가능, int 구매개수) throws InterruptedException {
        boolean 구매진행=true;
        String 상점구매결과="";
        if(스택가능==1){ //선택한 타겟이 스택가능이면
            if(구매개수>=1 && 구매진행) {
                System.out.print(상점.리스트.get(타겟 - 1).아이템이름 + "을 " + 구매개수 + "개 구매하시겠습니까?" +
                        "\n(총 " +(상점.리스트.get(타겟-1).구매가격*구매개수)+"골드)" +
                        "\n1.구매한다" +
                        "\n2.취소한다"+
                        "\n→");
                입력=sc.nextInt();
            }//구매갯수만큼 구매가격을 띄워주고 진짜 구매할건지 물은 뒤 입력받음.
            else{
                System.out.println("취소합니다.");
                Thread.sleep(1000);
                상점구매결과="구매취소함";
                구매진행=false;
            }
            if(입력==1 &&구매진행 && (타겟==1 || 타겟==2)){//진짜구매한다고 했을때(인벤토리안에 고유번호가 같은 아이템이 존재하는지 확인)(체력물약과 마나물약은 같은 아이템이 항상 존재하므로 따로 확인 안하게 하기)
                //타겟이 체력물약이거나 마나물약일 경우
                if(this.소지금>=상점.리스트.get(타겟-1).구매가격*구매개수 && 구매진행){//소지금이 구매금액 이상인지 확인
                    //이상이면
                    for(int i=0;i<=this.회복물약가방.size()-1;i++) { //회복물약가방의 내용물 갯수만큼 반복
                        if(this.회복물약가방.get(i).고유번호==상점.리스트.get(타겟-1).고유번호){ //회복물약가방의 i번째 아이템의 고유번호가 타겟의 고유번호와 같으면
                            this.회복물약가방.get(i).스택수 = this.회복물약가방.get(i).스택수+구매개수; //회복물약가방의 i번째 아이템의 스택수를 구매개수만큼 늘린다.
                            this.소지금=this.소지금-(상점.리스트.get(타겟-1).구매가격*구매개수); // 소지금을 구매가격만큼 차감한다.
                            구매진행=false;
                            System.out.println("구매에 성공했습니다.");
                            Thread.sleep(1000);
                            break; //스택 늘린 뒤에 for문 나감
                        }
                    } //for문끝
                }
                else if(this.소지금<상점.리스트.get(타겟-1).구매가격*구매개수 && 구매진행){//소지금이 구매금액보다 적으면
                    System.out.println("소지금이 부족합니다.");
                    Thread.sleep(1000);
                    상점구매결과="돈모자름";
                    구매진행=false;
                }
            }//타겟이 체력물약이거나 마나물약일경우 끝

            //타겟이 물약이 아닐경우
            else if(입력==1 && 구매진행 && 타겟>=3){
                //타겟이 체력물약, 마나물약이 아닌경우
                if(this.소지금>=상점.리스트.get(타겟-1).구매가격*구매개수 &&구매진행) { //소지금이 구매금액 이상인지 확인
                    //이상이면
                    for (int i = 0; i <= this.소지품.size() - 1; i++) { //소지품의 내용물 갯수만큼 반복
                        if (this.소지품.get(i).고유번호 == 상점.리스트.get(타겟 - 1).고유번호) { //소지품의 i번째 아이템의 고유번호가 타겟의 고유번호와 같으면(같은 아이템이 존재하면)
                            this.소지품.get(i).스택수 = this.소지품.get(i).스택수+구매개수; //소지품방의 i번째 아이템의 스택수를 구매개수만큼 늘린다.
                            this.소지금=this.소지금-(상점.리스트.get(타겟-1).구매가격*구매개수);// 소지금을 구매가격만큼 차감한다.
                            System.out.println("구매에 성공했습니다.");
                            Thread.sleep(1000);
                            구매진행=false;
                            break; //스택 늘린 뒤에 for문 나감
                        }
                    }
                    //if문 다돌았는데도 구매진행이 true이면 (고유번호와 같은 아이템이 존재하지 않는다면)
                    if(구매진행==true){
                        if(this.소지품.size()>=20){ //또한 소지품의 개수가 20개 이상이라면
//                            System.out.println("this.소지품.size() = "+this.소지품.size());
                            System.out.println("인벤토리 공간이 부족합니다.");
                            Thread.sleep(1000);
                            구매진행=false;
                        }
                        else{ //소지품의 개수가 19개 이하라면
                            상점.리스트.get(타겟-1).스택수=구매개수; // 상점 리스트의 스택수를 임시로 구매개수로 바꾼다.
                            this.소지품.add(상점.리스트.get(타겟-1)); // 상점에서 선택한 아이템을 소지품의 제일 뒤에 추가한다.
                            상점.리스트.get(타겟-1).스택수=1; // 상점 리스트의 스택수를 1로 다시 바꾼다.
                            this.소지금=this.소지금-(상점.리스트.get(타겟-1).구매가격*구매개수);// 소지금을 구매가격만큼 차감한다.
                            System.out.println("구매에 성공했습니다.");
                            Thread.sleep(1000);
                            상점구매결과="구매완료";
                            구매진행=false;
                        }
                    }
                }
                else if(this.소지금<상점.리스트.get(타겟-1).구매가격*구매개수 &&구매진행){ // 소지금이 구매금액보다 적다면
                    System.out.println("소지금이 부족합니다.");
                    Thread.sleep(1000);
                    상점구매결과="돈모자름";
                    구매진행=false;
                }
            }
        }
        else if(스택가능==2){ //스택불가능 아이템이면
            if(this.소지금>=상점.리스트.get(타겟-1).구매가격 &&구매진행) { //소지금이 구매금액 이상인지 확인
                //이상이면
                if(this.소지품.size()>=20){ //또한 소지품의 개수가 20개 이상이라면
//                    System.out.println("this.소지품.size() = "+this.소지품.size());
                    System.out.println("인벤토리 공간이 부족합니다.");
                    Thread.sleep(1000);
                }
                else{ //소지품의 개수가 19개 이하라면
                    this.소지품.add(상점.리스트.get(타겟-1)); // 상점에서 선택한 아이템을 소지품의 제일 뒤에 추가한다.
                    this.소지금=this.소지금-(상점.리스트.get(타겟-1).구매가격);// 소지금을 구매가격만큼 차감한다.
                    System.out.println("구매에 성공했습니다.");
                    Thread.sleep(1000);
                    상점구매결과="구매완료";
                }
                구매진행=false;
            }
            else if(this.소지금<상점.리스트.get(타겟-1).구매가격 && 구매진행){//소지금이 구매금액보다 적으면
                System.out.println("소지금이 부족합니다.");
                Thread.sleep(1000);
                상점구매결과="돈모자름";
                구매진행=false;
            }
        }
    }
}

//1. 선택한 템이 스택가능이면 몇개를 구매할건지 물어보기//
//1-1 구매개수를 1이상으로 입력 받으면 진짜 구매할건지 물어보기//
//1-1-1 구매한다고 했으면 인벤토리 안에 고유번호가 같은 아이템이 존재하는지 확인
//1-1-1-1 존재하면 돈이 충분한지 확인
//1-1-1-1-1 돈이 충분하다면 같은 아이템의 스택을 구매개수만큼 늘림
//1-1-1-1-2 돈이 부족하다면 돈이 부족하다는 문구를 띄우고 뒤로가기
//1-1-1-2 존재하지 않으면 인벤토리의 남은 공간이 있는지 확인
//1-1-1-2-1 남은 공간이 있다면 돈이 충분한지 확인
//1-1-1-2-1-1 돈이 충분하다면 인벤토리에 해당 아이템을 추가
//1-1-1-2-1-2 돈이 부족하다면 돈이 부족하다는 문구를 띄우고 뒤로가기
//1-1-1-2-2 남은 공간이 없다면 인벤토리가 꽉찼다는 문구를 띄우고 뒤로가기
//1-1-2 구매안한다고 했으면 뒤로가기
//1-2 0을 입력시 구매진행 false//

//2. 선택한 템이 스택불가능이면 그냥 구매할건지 물어보기
//2-1 구매한다고 했으면 돈이 충분한지 확인
//2-1-1 돈이 충분하면 공간이 충분한지 확인
//2-1-1-1 공간이 충분하면 인벤토리에 해당 아이템을 추가
//2-1-1-2 공간이 부족하다면 인벤토리가 꽉찼다는 문구를 띄우고 뒤로가기
//2-1-2 돈이 부족하다면 돈이 부족하다는 문구를 띄우고 뒤로가기
//2-2 구매안한다고 했으면 뒤로가기
//    public int 구매개수확인(){
//        System.out.print("" +
//                "\n구매할 개수를 입력해주세요." +
//                "\n→");
//        구매개수=sc.nextInt();
//        return 구매개수;
//    }



//        능력치.캐릭터레벨=1;
//                능력치.캐릭터최대경험치=100;
//                능력치.캐릭터현재경험치=0;
//                능력치.캐릭터최대체력=1000;
//                능력치.캐릭터현재체력=1000;
//                능력치.캐릭터최대마나=100;
//                능력치.캐릭터현재마나=100;
//                능력치.캐릭터공격력=50;
//                능력치.캐릭터추가공격력=0;
//                능력치.캐릭터방어력=10;
//                능력치.캐릭터추가방어력=0;
//                능력치.캐릭터치명확률=20;
//                능력치.캐릭터치명피해=150;
//                능력치.캐릭터회피=10;
//                능력치.캐릭터최종공격력=능력치.캐릭터공격력+능력치.캐릭터추가공격력;
//                능력치.캐릭터최종방어력=능력치.캐릭터방어력+능력치.캐릭터추가방어력;